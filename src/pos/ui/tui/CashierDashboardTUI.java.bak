
package pos.ui.tui;

import pos.ui.UI;
import pos.model.Employee;
import pos.model.MenuItem;
import pos.model.Order;
import pos.model.OrderItem;
import pos.discount.*;
import pos.service.*;
import pos.model.Ingredient;
import java.util.*;

public class CashierDashboardTUI implements UI {
    private Employee self;
    private MenuService menu;
    private EmployeeService empService;
    private AuthService auth;
    private TableService tableService;
    private OrderService orderService;
    private InventoryService inventory;
    private Scanner scanner = new Scanner(System.in);

    public CashierDashboardTUI(Employee self, MenuService menu, EmployeeService empService, AuthService auth, TableService tableService, OrderService orderService, InventoryService inventory){
        this.self = self; this.menu = menu; this.empService = empService; this.auth = auth; this.tableService = tableService; this.orderService = orderService; this.inventory = inventory;
    }

    @Override public void start(){
        while(true){
            System.out.println("\\n--- CASHIER DASHBOARD ---");
            System.out.println("1) View Menu");
            System.out.println("2) Create Order");
            System.out.println("3) View Orders");
            System.out.println("4) Tables");
            System.out.println("0) Logout");
            System.out.print("Choose: "); String c = scanner.nextLine().trim();
            if (c.equals("1")) viewMenu();
            else if (c.equals("2")) createOrder();
            else if (c.equals("3")) viewOrders();
            else if (c.equals("4")) viewTables();
            else if (c.equals("0")){ System.out.println("Logging out..."); break; }
            else System.out.println("Invalid"); 
        }
    }
    private void viewMenu(){
        System.out.println("\\n--- MENU ITEMS ---");
        System.out.println("ID | Name | Price | Category | Availability");
        for (MenuItem m : menu.all()) {
            String avail = "AVAILABLE";
            // check availability by trying to see if ingredients or drink stock suffice for qty 1
            boolean ok = true;
            if (m.getRecipe() == null || m.getRecipe().getItems().isEmpty()){
                // drink - check ingredient with same name
                pos.model.Ingredient ingFound = null;
                for (pos.model.Ingredient i : inventory.all()) if (i.getName().toLowerCase().contains(m.getName().toLowerCase())) { ingFound = i; break; }
                if (ingFound==null || ingFound.getStock() < 1) ok = false;
            } else {
                for (Map.Entry<Integer,Integer> e : m.getRecipe().getItems().entrySet()){
                    pos.model.Ingredient ing = inventory.findById(e.getKey());
                    if (ing==null || ing.getStock() < e.getValue()){ ok = false; break; }
                }
            }
            if (!ok) avail = "NOT AVAILABLE";
            System.out.println(m.getId() + " | " + m.getName() + " | " + String.format("%.2f", m.getPrice()) + " | " + m.getCategory() + " | " + avail);
        }
    }
    public void createOrder(){
        try{
            System.out.println("Is this walk-in? (y/n) "); String w = scanner.nextLine().trim();
            int tableId = 0;
            boolean seniorOrPwd = false;
            if (w.equalsIgnoreCase("n")){
                // choose table
                for (pos.model.Table t : tableService.all()) System.out.println(t.toString());
                System.out.print("Select table id: "); tableId = Integer.parseInt(scanner.nextLine().trim());
                pos.model.Table t = tableService.findById(tableId);
                if (t==null){ System.out.println("Table not found"); return; }
                // allow ordering for OCCUPIED (existing customer) or AVAILABLE (assign customer)
                if (t.getStatus().equals("DIRTY")){
                    System.out.println("Table is dirty and cannot take orders until cleaned."); return;
                }
                if (t.getStatus().equals("AVAILABLE")){
                    System.out.print("Number of people: "); int pc = Integer.parseInt(scanner.nextLine().trim());
                    if (pc > t.getCapacity()){ System.out.println("Exceeds capacity"); return; }
                    // assign as occupied for this order session
                    t.setStatus("OCCUPIED"); t.setCustomerCount(pc); tableService.saveAll();
                } else {
                    // if OCCUPIED we proceed - existing customer; do not reassign count
                    System.out.println("Selected table is currently occupied. Proceeding to take order for existing customer."); 
                }
            } else {
                System.out.print("Is customer senior or PWD? (y/n): "); String s = scanner.nextLine().trim();
                seniorOrPwd = s.equalsIgnoreCase("y");
            }
            Order o = new Order(orderService.nextId(), self.getId(), tableId);
            o.setSeniorOrPwd(seniorOrPwd);
            while(true){
                viewMenu();
                System.out.print("Enter menu id to add (0 to finish): "); int mid = Integer.parseInt(scanner.nextLine().trim());
                if (mid==0) break;
                MenuItem mi = menu.findById(mid);
                if (mi==null){ System.out.println("No such item"); continue; }
                System.out.print("Quantity: "); int q = Integer.parseInt(scanner.nextLine().trim());
                o.addItem(new OrderItem(mi.getId(), mi.getName(), q, mi.getPrice()));
            }
            // apply discount via interface
            double discount = 0.0;
            if (o.isSeniorOrPwd()){
                // ask type: 1 senior 2 pwd
                System.out.print("Discount type: 1) Senior 2) PWD : "); String dt = scanner.nextLine().trim();
                if (dt.equals("1")){
                    SeniorDiscount sd = new SeniorDiscount(); discount = sd.apply(o);
                } else {
                    PWDDiscount pd = new PWDDiscount(); discount = pd.apply(o);
                }
            }
            o.setDiscountAmount(discount);
            // try deduct ingredients
            List<String> probs = orderService.tryDeductIngredients(o);
            if (!probs.isEmpty()){
                System.out.println("Cannot create order due to: "); for (String p: probs) System.out.println(" - " + p);
                return;
            }
            // save order (pending for table, immediate checkout for walk-in)
            orderService.add(o);
            System.out.println("Order created with id="+o.getId());
            if (o.getTableId() == 0){
                // walk-in -> checkout immediately
                checkout(o.getId());
            }
        }catch(Exception ex){ System.out.println("Failed: " + ex.getMessage()); }
    }
    private void viewOrders(){
        System.out.println("\\n--- ORDERS ---");
        for (Order o : orderService.all()){
            // filter: cashier only sees own orders
            if (!self.getRole().equals("Admin") && o.getCreatedBy() != self.getId()) continue;
            System.out.println("Order#"+o.getId()+" | status:"+o.getStatus()+" | table:"+o.getTableId()+" | subtotal:"+String.format("%.2f", o.getSubtotal())+" | discount:"+String.format("%.2f", o.getDiscountAmount()));
        }
        System.out.print("Select order id to view or 0: "); int id = Integer.parseInt(scanner.nextLine().trim());
        if (id==0) return;
        Order o = orderService.findById(id);
        if (o==null){ System.out.println("Not found"); return; }
        System.out.println("Items:"); for (OrderItem it : o.getItems()) System.out.println(" - " + it.getMenuItemName() + " x" + it.getQuantity() + " -> " + String.format("%.2f", it.getSubtotal()));
        System.out.println("Subtotal: " + String.format("%.2f", o.getSubtotal()));
        System.out.println("Discount: " + String.format("%.2f", o.getDiscountAmount()));
        System.out.println("Total: " + String.format("%.2f", o.getTotal()));
        System.out.println("1) Checkout  2) Refund  3) Delete  0) Back");
        String c = scanner.nextLine().trim();
        if (c.equals("1")) checkout(o.getId());
        else if (c.equals("2")) refund(o.getId());
        else if (c.equals("3")) delete(o.getId());
    }
    public void checkout(int orderId){
        Order o = orderService.findById(orderId);
        if (o==null){ System.out.println("Not found"); return; }
        if (o.getStatus().equals("COMPLETED")){ System.out.println("Already completed"); return; }
        System.out.println("Checkout Order#"+o.getId()+" total:"+String.format("%.2f", o.getTotal()));
        System.out.print("Enter payment amount: "); double pay = Double.parseDouble(scanner.nextLine().trim());
        if (pay < o.getTotal()){ System.out.println("Not enough payment"); return; }
        double change = pay - o.getTotal();
        System.out.println("Change: " + String.format("%.2f", change));
        o.setStatus("COMPLETED");
        orderService.update(o);
        // mark table dirty if applicable
        if (o.getTableId() != 0){
            pos.model.Table t = tableService.findById(o.getTableId());
            if (t!=null){ t.setStatus("DIRTY"); tableService.saveAll(); }
        }
        // save receipt to sales.txt (simple)
        String rec = o.getId() + "|" + o.getCreatedBy() + "|" + String.format("%.2f", o.getSubtotal()) + "|" + String.format("%.2f", o.getDiscountAmount()) + "|" + String.format("%.2f", o.getTotal()) + "|" + o.getCreatedAtString();
        FileUtil.appendLine("resources/data/sales.txt", rec);
        System.out.println("Checkout complete and receipt saved."); 
    }
    public void refund(int orderId){
        Order o = orderService.findById(orderId);
        if (o==null){ System.out.println("Not found"); return; }
        if (!o.getStatus().equals("COMPLETED")){ System.out.println("Only completed orders can be refunded"); return; }
        o.setStatus("REFUNDED"); orderService.update(o);
        // revert stocks (simplified: not implemented complex revert to keep simple)
        System.out.println("Order marked refunded (stocks not auto-restored in this simple implementation)."); 
    }
    public void delete(int orderId){
        List<String> lines = pos.service.FileUtil.readAllLines("resources/data/orders.txt");
        List<String> out = new ArrayList<String>();
        for (String l : lines){
            String[] p = l.split("\\\\|", -1);
            try { int id = Integer.parseInt(p[0]); if (id!=orderId) out.add(l); } catch(Exception ex){ out.add(l); }
        }
        pos.service.FileUtil.writeAll("resources/data/orders.txt", out);
        orderService.load();
        System.out.println("Order removed."); 
    }
    private void viewTables(){
        System.out.println("\\n--- TABLES ---");
        for (pos.model.Table t : tableService.all()) System.out.println(t.toString());
        System.out.print("1) Assign Customer 2) Clean Table 0) Back: "); String c = scanner.nextLine().trim();
        if (c.equals("1")){
            System.out.print("Table id: "); int id = Integer.parseInt(scanner.nextLine().trim());
            pos.model.Table t = tableService.findById(id);
            if (t==null){ System.out.println("Not found"); return; }
            if (!t.getStatus().equals("AVAILABLE")){ System.out.println("Table not available"); return; }
            System.out.print("Number people: "); int pc = Integer.parseInt(scanner.nextLine().trim());
            if (pc > t.getCapacity()){ System.out.println("Exceeds capacity"); return; }
            t.setStatus("OCCUPIED"); t.setCustomerCount(pc); tableService.saveAll(); System.out.println("Assigned."); 
        } else if (c.equals("2")){
            System.out.print("Table id to clean: "); int id = Integer.parseInt(scanner.nextLine().trim());
            pos.model.Table t = tableService.findById(id);
            if (t==null){ System.out.println("Not found"); return; }
            if (!t.getStatus().equals("DIRTY")){ System.out.println("Not dirty"); return; }
            t.setStatus("AVAILABLE"); t.setCustomerCount(0); tableService.saveAll(); System.out.println("Cleaned."); 
        }
    }
}
