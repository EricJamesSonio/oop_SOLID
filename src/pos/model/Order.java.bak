
package pos.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.text.SimpleDateFormat;

public class Order {
    private int id;
    private int createdByEmployeeId;
    private int tableId; // 0 for walk-in
    private List<OrderItem> items = new ArrayList<OrderItem>();
    private String status; // PENDING, COMPLETED, REFUNDED, DELETED
    private double discountAmount; // absolute value
    private boolean seniorOrPwd;

    private Date createdAt = new Date();

    public Order(int id, int createdByEmployeeId, int tableId){
        this.id = id; this.createdByEmployeeId = createdByEmployeeId; this.tableId = tableId; this.status = "PENDING";
    }
    public void addItem(OrderItem it){ items.add(it); }
    public List<OrderItem> getItems(){ return items; }
    public int getId(){ return id; }
    public int getCreatedBy(){ return createdByEmployeeId; }
    public int getTableId(){ return tableId; }
    public String getStatus(){ return status; }
    public void setStatus(String s){ this.status = s; }
    public void setDiscountAmount(double d){ this.discountAmount = d; }
    public double getDiscountAmount(){ return discountAmount; }
    public void setSeniorOrPwd(boolean v){ this.seniorOrPwd = v; }
    public boolean isSeniorOrPwd(){ return seniorOrPwd; }
    public double getSubtotal(){
        double s = 0.0;
        for (OrderItem it : items) s += it.getSubtotal();
        return s;
    }
    public double getTotal(){
        return getSubtotal() - discountAmount;
    }
    public String getCreatedAtString(){
        SimpleDateFormat f = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        return f.format(createdAt);
    }
    public String serializeItems(){
        // item1;item2 where item is id|name|qty|price
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (OrderItem it : items){
            if (!first) sb.append(";"); else first=false;
            sb.append(it.toString());
        }
        return sb.toString();
    }
    public static Order parse(String line){
        // orderId|createdBy|tableId|status|discount|senior|createdAt|item1;item2
        // use limit=8 so items field (which contains |) remains intact in last token
        String[] p = line.split("\\\\|", 8);
        try{
            int id = Integer.parseInt(p[0]);
            int createdBy = Integer.parseInt(p[1]);
            int tableId = Integer.parseInt(p[2]);
            String status = p[3];
            double discount = Double.parseDouble(p[4]);
            boolean senior = Boolean.parseBoolean(p[5]);
            Order o = new Order(id, createdBy, tableId);
            o.setStatus(status);
            o.setDiscountAmount(discount);
            o.setSeniorOrPwd(senior);
            // parse createdAt if present
            if (p.length>6 && p[6] != null && p[6].length()>0){
                try{
                    java.text.SimpleDateFormat fmt = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    o.createdAt = fmt.parse(p[6]);
                }catch(Exception ex){}
            }
            // items are after 7th pipe; last token is items string
            String itemsStr = p.length>7? p[7] : "";
            if (itemsStr != null && itemsStr.length()>0){
                String[] its = itemsStr.split(";");
                for (int i=0;i<its.length;i++){
                    OrderItem oi = OrderItem.parse(its[i]);
                    if (oi!=null) o.addItem(oi);
                }
            }
            return o;
        }catch(Exception ex){
            return null;
        }
    }
}
